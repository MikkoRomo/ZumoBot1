#include <project.h>
#include <stdio.h>
#include <Time.h>
#include "Motor.h"
#include "Ultra.h"
#include "Nunchuk.h"
#include "Reflectance.h"
#include "I2C_made.h"
#include "Gyro.h"
#include "Accel_magnet.h"
#include "IR.h"
#include "Ambient.h"
#include "Beep.h"

int rread(void);

int srand();
int rand();

int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    ADC_Battery_Start();        
    int16 adcresult =0;
    float volts = 0.0;
    int delay = 0;
    int led = 1;
    struct sensors_ ref;
    struct sensors_ dig;
    int start = 1;
    int aloitus = 0;
    int maapallo = 0;
    int pyorea = 0;
    int direction;
    
    srand(time(NULL)); 

    printf("\nBoot\n");

    BatteryLed_Write(0);
    
    sensor_isr_StartEx(sensor_isr_handler);
    
    reflectance_start();
    
    Ultra_Start();

    IR_led_Write(1);

    reflectance_set_threshold(11900, 11150, 11550, 12850);
    for(;;)
    {
        //Viivalle ajo, jää odottamaan napinpainallusta (looppi estää get_IR() kutsumisen)
        while(aloitus == 0){
            
            if(SW1_Read()==0){
                start = 0;
                aloitus = 1;
            }
            
            //Yksinkertainen viivalla ajo. Poistuu loopista 
            //ja pysähtyy, kun kaikki sensorit ovat mustalla.
            while(start < 1){
                motor_start();
                reflectance_read(&ref);        
                reflectance_digital(&dig);      
                
                if(ref.l1==23999 && ref.l3==23999 && ref.r1==23999 && ref.r3==23999){
                    //poistuu loopista, kun kaikki sensorit mustalla
                    start=1;
                }else if(!dig.l1 && !dig.r1 && dig.l3 && dig.r3){
                    //ajaa suoraan
                    motor_forward(100,5);    
                }else if(!dig.l1 && dig.r1){
                    //vasen käännös
                    motor_turn(30,100,5);
                }else if(dig.l1 && !dig.r1){
                    //oikea käännös
                    motor_turn(100,30,5);
                    }
            }
        
        }
        
        motor_forward(0,0);   
        
        get_IR();
        
        motor_forward (255,200);
        
        while (maapallo==pyorea){
                
            motor_forward(200,5);
            
            direction = rand() % 2;         // valitsee satunnaisen suunnan, 0 = oikea, 1 = vasen
            
            /*ajaa kovaa vauhtia eteenpäin kun tunnistaa jotain lähellä
            if(Ultra_GetDistance()<15){
                while(1){
                    reflectance_read(&ref);         
                    reflectance_digital(&dig);      
                    motor_forward(255,5);
                    //kääntyy mustalta viivalta pois, eikä aja enää kovaa vauhtia eteenpäin
                    if(ref.l1==23999 && ref.l3==23999 && ref.r1==23999 && ref.r3==23999){
                        motor_backward(200,350);
                        motor_turn (150,0,600);
                        break;   
                    }
                }
            }*/
            reflectance_read(&ref);         
            reflectance_digital(&dig);      
            
            if(ref.l3==23999 || ref.r3==23999){
                motor_backward(200,500);
                if(direction == 1){
                    motor_turn (0,150,700);
                }else{
                   motor_turn (150,0,700);    
                }
                motor_turn (150,0,600);     //?
            }
            if(ref.r3==23999 && dig.l3){
                motor_backward(200,500);
                if(direction == 1){
                    motor_turn (0,150,800);
                }else{
                   motor_turn (150,0,800);    
                }
            }
             if(ref.l3==23999 && dig.r3){
                motor_backward(200,500);
                if(direction == 0){
                    motor_turn (150,0,800);
                }else{
                   motor_turn (0,150,800);    
                }
            }
        }
        
        while(delay >= 3000){
            ADC_Battery_StartConvert();
            if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for get ADC converted value
                adcresult = ADC_Battery_GetResult16();
                //volts = ADC_Battery_CountsTo_Volts(adcresult);                  // convert value to Volts
                volts = ((float)adcresult/4095)*5*1.5;
                
                // If you want to print value
                printf("%d %f\r\n",adcresult, volts);
                delay = 0;
        }
        }
        
        delay += 10;
        
        if(volts < 4){
            if(delay % 100 == 0){
                if(led == 1){
                    if(BatteryLed_Read() == 0){
                        BatteryLed_Write(led);
                    } else if (BatteryLed_Read() == 1){
                        BatteryLed_Write(0);
                        led = 0;
                    }
                }
                if(led == 0){
                    if(BatteryLed_Read() == 0){
                        BatteryLed_Write(1);
                    } else if (BatteryLed_Read() == 1){
                        BatteryLed_Write(0);
                        led = 1;
                    } 
                }
            }
        }
            
        CyDelay(10);
      
    }
 }
