#include <project.h>
#include <stdio.h>
#include "Motor.h"
#include "Ultra.h"
#include "Nunchuk.h"
#include "Reflectance.h"
#include "I2C_made.h"
#include "Gyro.h"
#include "Accel_magnet.h"
#include "IR.h"
#include "Ambient.h"
#include "Beep.h"

int rread(void);

int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    ADC_Battery_Start();        
    int16 adcresult =0;
    float volts = 0.0;
    int delay = 0;
    int led = 1;
    struct sensors_ ref;
    struct sensors_ dig;
    int start = 1;
    int aloitus = 0;
    int stop = 0;

    printf("\nBoot\n");

    BatteryLed_Write(0);
    
    sensor_isr_StartEx(sensor_isr_handler);
    
    reflectance_start();

    IR_led_Write(1);

    reflectance_set_threshold(11900, 11150, 11550, 12850);
    for(;;)
    {
        //Viivalle ajo, jää odottamaan napinpainallusta (looppi estää get_IR() kutsumisen)
        while(aloitus == 0){
            if(SW1_Read()==0){
                start = 0;
                aloitus = 1;
            }
            //Yksinkertaisesti seuraa viivaa. Kun kaikki sensorit ovat mustalla,
            //poistuu loopista ja pysähtyy odottamaan IR 
            while(start < 1){
                motor_start();
                reflectance_read(&ref);         
                reflectance_digital(&dig);      
                
                if(ref.l1==23999 && ref.l3==23999 && ref.r1==23999 && ref.r3==23999){
                    //kaikki sensorit mustalla
                    start=1;
                }else if(!dig.l1 && !dig.r1 && dig.l3 && dig.r3){
                    //ajaa suoraan
                    motor_forward(100,5);    
                }else if(!dig.l1 && dig.r1){
                    //vasen käännös
                    motor_turn(30,100,5);
                }else if(dig.l1 && !dig.r1){
                    //oikea käännös
                    motor_turn(100,30,5);
                    }
            }
        
        }
        
        motor_forward(0,0);   
        
        get_IR();

        //Viivan seuraaminen
        while(stop<3){
                reflectance_read(&ref);         
                reflectance_digital(&dig);      
            
            if(ref.l1==23999 && ref.l3==23999 && ref.r1==23999 && ref.r3==23999){
                //kaikki sensorit mustalla
                stop++;
                if(stop<3){                     
                    motor_forward(255,80);
                }
            }else if(!dig.l1 && !dig.r1 && dig.l3 && dig.r3){
                //keskimmäiset sensorit mustalla, sivut valkoisella - ajaa suoraan
                motor_forward(255,5);    
                
            }else if(!dig.l1 && dig.r1){
                //vasen käännös
                //laskee suhdeluvun tarkoista sensoriarvoista ja syöttää sen motor_turn()-kutsuun
                if((ref.l1-ref.r1)/(ref.l1-5100)>0.4){
                    //tarkka käännös
                    motor_turn((ref.l1-ref.r1)/(ref.l1-5100)*255,255,5);
                }else{
                    //varakäännös
                    motor_turn(100,255,5);
                }
                
            }else if(dig.l1 && !dig.r1){
                //oikea käännös
                //laskee suhdeluvun tarkoista sensoriarvoista ja syöttää sen motor_turn()-kutsuun
                if((ref.l1-ref.r1)/(ref.l1-5100)>0.4){
                    //tarkka käännös
                    motor_turn(255,(ref.r1-ref.l1)/(ref.r1-4300)*255,5);
                }else{
                    //varakäännös
                    motor_turn(255,100,5);
                }
                
                //jos robotti ajaa reilusti yli viivasta, täysi käännös viivan suuntaan
            }else if(!dig.r3 && dig.r1 && dig.l1 && dig.l3){
                //oikea tiukka käännös
                motor_turn(255,0,5);
            }else if(dig.r3 && dig.r1 && dig.l1 && !dig.l3){
                //vasen tiukka käännös
                motor_turn(0,255,5);
                }    
        }
        motor_forward(0,0); 
  
        
        
        
        while(delay >= 3000){
            ADC_Battery_StartConvert();
            if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for get ADC converted value
                adcresult = ADC_Battery_GetResult16();
                //volts = ADC_Battery_CountsTo_Volts(adcresult);                  // convert value to Volts
                volts = ((float)adcresult/4095)*5*1.5;
                
                // If you want to print value
                printf("%d %f\r\n",adcresult, volts);
                delay = 0;
        }
        }
        
        delay += 10;
        
        if(volts < 4){
            if(delay % 100 == 0){
                if(led == 1){
                    if(BatteryLed_Read() == 0){
                        BatteryLed_Write(led);
                    } else if (BatteryLed_Read() == 1){
                        BatteryLed_Write(0);
                        led = 0;
                    }
                }
                if(led == 0){
                    if(BatteryLed_Read() == 0){
                        BatteryLed_Write(1);
                    } else if (BatteryLed_Read() == 1){
                        BatteryLed_Write(0);
                        led = 1;
                    } 
                }
            }
        }
            
        CyDelay(10);
      
    }
 }
